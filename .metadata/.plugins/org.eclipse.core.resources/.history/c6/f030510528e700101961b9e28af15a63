package com.ripplesystem.foobar.service;

import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.jdo.FetchGroup;
import javax.jdo.PersistenceManager;
import javax.jdo.Query;

import com.google.inject.Inject;
import com.ripplesystem.foobar.model.DeviceInfo;
import com.ripplesystem.foobar.model.PositionInfo;
import com.ripplesystem.foobar.model.StoreInfo;
import com.ripplesystem.foobar.model.UserInfo;

public class FoobarDataService
{
	private static final Logger log = Logger.getLogger(FoobarDataService.class.getName());
	private PersistenceManager pm;

	@Inject
	public FoobarDataService(PersistenceManager pm)
	{
		this.pm = pm;
		pm.setDetachAllOnCommit(true);
		pm.getFetchPlan().setGroup(FetchGroup.ALL);
	}
 
	private void begin()
	{
		pm.currentTransaction().begin();
	}
	
	private void commit()
	{
		pm.currentTransaction().commit();
	}
	
	public void save(StoreInfo store)
	{
		begin();
		try
		{
			log.info(String.format("Saving StoreInfo %s", store.getName()));
			pm.makePersistent(store);
		}
		finally
		{
			commit();
		}
	}
	
	public void save(UserInfo user)
	{
		begin();
		try
		{
			log.info( String.format("Saving UserInfo %s", user.getName()));
			pm.makePersistent(user);
		}
		finally
		{
			commit();
		}
	}

	/**
	 * 
	 */
	public StoreInfo getStoreInfoByKey(Long key)
	{
		begin();
		try
		{
			StoreInfo storeInfo = pm.getObjectById(StoreInfo.class,key);
			return pm.detachCopy(storeInfo);
		}
		finally
		{
			commit();
		}		
	}
	
	/**
	 * finds a StoreInfo registered with the given email address.
	 * @param email
	 * @return
	 */
	public StoreInfo getStoreInfoByEmail(String email) {
		javax.jdo.Query query = pm.newQuery(StoreInfo.class);
		query.setFilter("email == emailParam");
		query.declareParameters("String emailParam");
		
		try
		{
			List<StoreInfo> stores = (List<StoreInfo>)query.execute(email);
			if (stores.size() == 0)
				return null;
			StoreInfo storeInfo = pm.detachCopy(stores.get(0));
			return storeInfo;
		}
		finally
		{
			query.closeAll();
		}
	}

	/**
	 * Returns the UserInfo object by key
	 * @param key
	 * @return
	 */
	public UserInfo getUserInfoByKey(long key) {
		begin();
		try
		{
			UserInfo userInfo = pm.getObjectById(UserInfo.class, key);
			return pm.detachCopy(userInfo);
		}
		finally
		{
			commit();
		}
	}
		
	/**
	 * Gets a UserInfo for the given deviceId.
	 * If no UserInfo is registered for the given deviceId, it returns null.
	 */
	public UserInfo getUserInfoByDeviceId(String deviceId) {
		javax.jdo.Query query = pm.newQuery(DeviceInfo.class);
		query.setFilter("deviceId == deviceIdParam");
		query.declareParameters("String deviceIdParam");
		
		try
		{
			List<DeviceInfo> devices = (List<DeviceInfo>)query.execute(deviceId);
			if (devices.size() == 0)
			{
				return null;
			}
			UserInfo userInfo = devices.get(0).getUserInfo();
			return pm.detachCopy(userInfo);
		}
		finally
		{
			query.closeAll();
		}
	}

	/**
	 * Gets a UserInfo for the given deviceId.
	 * If no UserInfo is registered for the given deviceId, it returns null.
	 */
	public UserInfo getUserInfoByDeviceIdOld(String deviceId) {
		javax.jdo.Query query = pm.newQuery(UserInfo.class);
		query.setFilter("this.devices.contains(device) && device.deviceId == deviceIdParam");
		query.declareParameters("String deviceIdParam");
		
		try
		{
			List<UserInfo> users = (List<UserInfo>)query.execute(deviceId);
			if (users.size() == 0)
			{
				return null;
			}
			UserInfo userInfo = users.get(0);
			return pm.detachCopy(userInfo);
		}
		finally
		{
			query.closeAll();
		}
	}

	/**
	 * Returns multiple instances of StoreInfos for the given list of keys
	 * @param keys
	 * @return null if the keys list is null
	 */
	public List<StoreInfo> getStoreInfosByKeys(List<Long> keys) {
		if (keys == null)
			return null;
		
		Query query = pm.newQuery(StoreInfo.class, ":p.contains(key)");
		try
		{
			List<StoreInfo> list = (List<StoreInfo>)query.execute(keys);
			return (List<StoreInfo>) pm.detachCopyAll(list);
		}
		finally
		{
			query.closeAll();
		}
	}

	/**
	 * Assigns a position
	 * @param posInfo
	 */
	public void assignRedeemToken(PositionInfo posInfo)
	{
		// Get the store info...
		begin();
		try
		{
			StoreInfo store = pm.getObjectById(StoreInfo.class, posInfo.getStoreKey());
			Date expiration = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));
			posInfo.setRedeemTokenIndex(store.nextRedeemTokenIndex());
			posInfo.setRedeemTokenExpiration(expiration);
		}
		finally
		{
			commit();
		}
	}

	public PositionInfo getPositionInfoByStoreKeyAndTokenIndex(long storeKey, int tokenIndex)
	{		
		Query query = pm.newQuery(PositionInfo.class);
		query.setFilter("storeKey == storeKeyParam && redeemTokenIndex == tokenIndexParam");
		query.declareParameters("long storeKeyParam, int tokenIndexParam");
		
		try
		{
			List<PositionInfo> positions = (List<PositionInfo>)query.execute(storeKey, tokenIndex);
			if (positions.size() == 0)
			{
				return null;
			}
			PositionInfo position = positions.get(0);
			return pm.detachCopy(position);
		}
		finally
		{
			query.closeAll();
		}
	}

	public void addOrRedeemPoints(PositionInfo position, long points) {
		begin();
		try
		{
			position.addOrRedeemPoints(points);
			pm.makePersistent(position);
		}
		finally
		{
			commit();
		}
	}
}
