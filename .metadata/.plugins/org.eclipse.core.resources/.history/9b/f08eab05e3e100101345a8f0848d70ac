package com.ripplesystem.foobar.test;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import static com.google.appengine.api.datastore.FetchOptions.Builder.withLimit;

public class FoobarModelStoreTest {
	
	private final LocalServiceTestHelper helper =
	        new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());
	
	@Before
	public void setUp()
	{
		helper.setUp();
	}
	
	@After
	public void tearDown()
	{
		helper.tearDown();
	}
	
	@Test
	public void testAddition() {
		assertEquals(4, 2+2);
	}
	
	public void testInsert()
	{
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		assertEquals(0, ds.prepare(new Query("yam")).countEntities(withLimit(10)));
		ds.put(new Entity("yam"));
		ds.put(new Entity("yam"));
		assertEquals(2, ds.prepare(new Query("yam")).countEntities(withLimit(10)));
	}
	
	@Test
	public void testInsert1() {
		testInsert();
	}
	
	@Test
	public void testInsert2() {
		testInsert();
	}
	
	@Test
	public void testInsertStore() {
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		
		// Pretend a new store was created
		Entity store = new Entity("Store");
		store.setProperty("name","まんじまけろ〜に");
		ds.put( store );
		
		// Pretend a new user was created
		Entity user = new Entity("User");
		user.setProperty("userId",(String)device.getProperty("deviceId"));
		ds.put(user);

		// Pretend a new device and user was created
		Entity device = new Entity("Device");
		device.setProperty("deviceId","1234567890");
		device.setProperty("token","ABCDE");
		device.setProperty("userKey", user.getKey());
		ds.put(device);

		// Pretend a
		Entity tx = new Entity("PointTransaction");
		tx.setProperty("storeKey", store.getKey());
		tx.setProperty("userKey", user.getKey());
		tx.setProperty("points", 10);
		ds.put(tx);
		
		// Get deviceId
		ds.prepare(new Query("Device"))
	}
}
