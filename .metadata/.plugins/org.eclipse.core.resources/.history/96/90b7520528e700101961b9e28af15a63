package com.ripplesystem.foobar.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Email;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.PreparedQuery;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.ripplesystem.foobar.model.DeviceInfo;
import com.ripplesystem.foobar.model.PositionInfo;
import com.ripplesystem.foobar.model.StoreInfo;
import com.ripplesystem.foobar.model.UserInfo;
import com.ripplesystem.foobar.service.FoobarDataService;
import com.ripplesystem.gae.PMF;

import static com.google.appengine.api.datastore.FetchOptions.Builder.withLimit;

public class FoobarModelStoreTest {
	
	private final LocalServiceTestHelper helper =
	        new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());
	
	@Before
	public void setUp()
	{
		helper.setUp();
	}
	
	@After
	public void tearDown()
	{
		helper.tearDown();
	}
	
	@Test
	public void testAddition() {
		assertEquals(4, 2+2);
	}
	
	public void testInsert()
	{
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		assertEquals(0, ds.prepare(new Query("yam")).countEntities(withLimit(10)));
		ds.put(new Entity("yam"));
		ds.put(new Entity("yam"));
		assertEquals(2, ds.prepare(new Query("yam")).countEntities(withLimit(10)));
	}
	
	@Test
	public void testInsert1() {
		testInsert();
	}
	
	@Test
	public void testInsert2() {
		testInsert();
	}
	
	// @Test
	public void testStorePersistence()
	{
		Injector injector = Guice.createInjector(new TestModule());
		FoobarDataService sis = injector.getInstance(FoobarDataService.class);
		
		// Save store info
		StoreInfo store = new StoreInfo();
		store.setName("まんじまけろ〜に");
		store.setAddress("東京都港区南麻布３−１９−２５");
		store.setTel("03-3123-1234");
		sis.save(store);
		long storeKey = store.getKey();
		
		// Save User
		UserInfo user = new UserInfo();
		user.setEmail(new Email("ab7d6afe7fd0f76a6527a7378fdba@foobar.ripplesystem.com"));
		user.setPassword("898a7698c69d79e55f4a9b6c67879dea6978c6");
		// Set Device List
		List<DeviceInfo> devices = new ArrayList<DeviceInfo>();
		DeviceInfo device = new DeviceInfo();
		device.setDeviceId("ab7d6afe7fd0f76a6527a7378fdba");
		devices.add(device);
		user.setDevices(devices);
		// Set Point Position
		PositionInfo pos = new PositionInfo();
		pos.setStoreKey(storeKey);
		// pos.setPoints(100);
		List<PositionInfo> positions = new ArrayList<PositionInfo>();
		positions.add(pos);
		user.setPositions(positions);
		// Now save the user.
		sis.save(user);
	}
	
	// @Test
	public void testInsertStore() throws EntityNotFoundException {
		DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
		String deviceId = "1234567890";
		
		{
			// Pretend a new store was created
			Entity store = new Entity("Store");
			store.setProperty("name","まんじまけろ〜に");
			ds.put( store );
						
			// Pretend a new user was created
			Entity user = new Entity("User");
			user.setProperty("userId","("+deviceId+")");
			user.setProperty("token","ABCDE");
			ds.put(user);
	
			// Pretend a new device and user was created
			Entity device = new Entity("Device", user.getKey());
			device.setProperty("deviceId",deviceId);
			ds.put(device);
	
			// Pretend a
			Entity tx = new Entity("PointBalance",user.getKey());
			tx.setProperty("storeKey", store.getKey());
			tx.setProperty("points", 10);
			ds.put(tx);
		}
		
		// Get deviceId
		PreparedQuery devices = ds.prepare(new Query("Device").addFilter("deviceId",FilterOperator.EQUAL,deviceId));
		for( Entity device : devices.asIterable())
		{
			Entity user = ds.get(device.getParent()); // The device's parent is user
			PreparedQuery balances = ds.prepare(new Query("PointBalance").setAncestor(user.getKey()));
			for( Entity balance : balances.asIterable() )
			{
				assertEquals(10L, balance.getProperty("points"));
			}
		}
	}
}
